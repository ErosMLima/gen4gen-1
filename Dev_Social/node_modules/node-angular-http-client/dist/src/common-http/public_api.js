"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
var interceptor_1 = require("./src/interceptor");
var backend_1 = require("./src/backend");
exports.HttpBackend = backend_1.HttpBackend;
exports.HttpHandler = backend_1.HttpHandler;
var client_1 = require("./src/client");
exports.HttpClient = client_1.HttpClient;
var headers_1 = require("./src/headers");
exports.HttpHeaders = headers_1.HttpHeaders;
var interceptor_2 = require("./src/interceptor");
exports.HTTP_INTERCEPTORS = interceptor_2.HTTP_INTERCEPTORS;
var params_1 = require("./src/params");
exports.HttpParams = params_1.HttpParams;
exports.HttpUrlEncodingCodec = params_1.HttpUrlEncodingCodec;
var request_1 = require("./src/request");
exports.HttpRequest = request_1.HttpRequest;
var response_1 = require("./src/response");
exports.HttpErrorResponse = response_1.HttpErrorResponse;
exports.HttpEventType = response_1.HttpEventType;
exports.HttpHeaderResponse = response_1.HttpHeaderResponse;
exports.HttpResponse = response_1.HttpResponse;
exports.HttpResponseBase = response_1.HttpResponseBase;
var xhr_1 = require("./src/xhr");
exports.HttpXhrBackend = xhr_1.HttpXhrBackend;
exports.XhrFactory = xhr_1.XhrFactory;
var xsrf_1 = require("./src/xsrf");
exports.HttpXsrfTokenExtractor = xsrf_1.HttpXsrfTokenExtractor;
/**
 * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s
 * to a request before passing it to the given `HttpBackend`.
 *
 * Meant to be used as a factory function within `HttpClientModule`.
 *
 * @stable
 */
function interceptingHandler(backend, interceptors) {
    if (interceptors === void 0) { interceptors = []; }
    if (!interceptors) {
        return backend;
    }
    return interceptors.reduceRight(function (next, interceptor) { return new interceptor_1.HttpInterceptorHandler(next, interceptor); }, backend);
}
exports.interceptingHandler = interceptingHandler;
//# sourceMappingURL=public_api.js.map